import OpenAI from 'openai'
import { PageLayout } from './layout'
import { BlockCopy } from './copy'
import { ExtractedContent } from './extract'
import { ColorPalette } from './palette'

export interface UnifiedGenerationResult {
  layout: PageLayout
  copy: BlockCopy
}

const openai = new OpenAI({
  baseURL: 'https://llmgtw.hhdev.ru/proxy/openai',
  apiKey: process.env.OPENAI_API_KEY || '81e71e36-ad00-4e86-93e3-81a459b39328'
})

export async function generateUnifiedContent(
  companyData: any,
  colorPalette?: ColorPalette
): Promise<UnifiedGenerationResult> {
  console.log('=== USING REAL LLM GENERATION ===')
  console.log('Company data:', JSON.stringify(companyData, null, 2))
  console.log('Color palette:', JSON.stringify(colorPalette, null, 2))
  
  try {
    const systemPrompt = `–°–æ–∑–¥–∞–π –±—Ä–µ–Ω–¥-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–∫–ª—é—á–∏ –í–°–ï 10 –±–ª–æ–∫–æ–≤ –≤ —ç—Ç–æ–º –ø–æ—Ä—è–¥–∫–µ:

1. hero - –≥–ª–∞–≤–Ω—ã–π –±–ª–æ–∫ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
2. about - –æ –∫–æ–º–ø–∞–Ω–∏–∏
3. tracks - –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
4. geo - –≥–µ–æ–≥—Ä–∞—Ñ–∏—è
5. facts - —Ü–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã
6. benefits - –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã
7. culture - –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞
8. media - —Å—Ç–∞—Ç—å–∏ –∏ –º–µ–¥–∏–∞
9. hiring - –∫–∞–∫ –ø–æ–ø–∞—Å—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É
10. cta - –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é

–í–µ—Ä–Ω–∏ JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "layout": {
    "blocks": [
      {"type": "hero", "props": {"logoUrl": "https://img.hhcdn.ru/employer-logo-original/1439083.png"}, "imageSlots": []},
      {"type": "about", "props": {}, "imageSlots": []},
      {"type": "tracks", "props": {}, "imageSlots": []},
      {"type": "geo", "props": {}, "imageSlots": []},
      {"type": "facts", "props": {}, "imageSlots": []},
      {"type": "benefits", "props": {}, "imageSlots": []},
      {"type": "culture", "props": {}, "imageSlots": []},
      {"type": "media", "props": {}, "imageSlots": []},
      {"type": "hiring", "props": {}, "imageSlots": []},
      {"type": "cta", "props": {}, "imageSlots": []}
    ]
  },
  "copy": {
    "hero": {
      "title": "Heads&Hands",
      "subtitle": "–°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–∞–ø–ø—ã –∏ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ª–∏–¥–µ—Ä–æ–≤ —Ä—ã–Ω–∫–∞",
      "buttonText": "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏",
      "directions": [
        {"title": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å—É–ø–µ—Ä–∞–ø–ø–æ–≤", "description": "–°–æ–∑–¥–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è", "icon": "üì±"},
        {"title": "–¶–∏—Ñ—Ä–æ–≤—ã–µ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã", "description": "–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫—Ä—É–ø–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞", "icon": "üåê"},
        {"title": "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏", "description": "–û—Ç –∏–¥–µ–∏ –¥–æ –∑–∞–ø—É—Å–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", "icon": "‚ö°"}
      ]
    },
    "about": {
      "title": "–û –∫–æ–º–ø–∞–Ω–∏–∏",
      "description": "Heads&Hands ‚Äî –ª–∏–¥–µ—Ä –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —ç–∫–æ—Å–∏—Å—Ç–µ–º –¥–ª—è –∫—Ä—É–ø–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å —Ç–∞–∫–∏–º–∏ –≥–∏–≥–∞–Ω—Ç–∞–º–∏, –∫–∞–∫ –¢-–±–∞–Ω–∫, LaModa –∏ –°–ø–æ—Ä—Ç–º–∞—Å—Ç–µ—Ä, —Å–æ–∑–¥–∞–≤–∞—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.",
      "achievements": [
        "2 –º–µ—Å—Ç–æ –≤ –†–µ–π—Ç–∏–Ω–≥–µ –†—É–Ω–µ—Ç–∞ —Å—Ä–µ–¥–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫—Ä—É–ø–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞",
        "200+ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ",
        "13 –ª–µ—Ç —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ä—ã–Ω–∫–µ"
      ]
    },
    "tracks": {
      "title": "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã",
      "tracks": [
        {"title": "–ú–æ–±–∏–ª—å–Ω–∞—è –∏ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "description": "iOS, Android, React Native, Flutter"},
        {"title": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "description": "Data Science, QA, Performance Testing"},
        {"title": "UX/UI –¥–∏–∑–∞–π–Ω", "description": "User Experience, Interface Design, Prototyping"}
      ]
    },
    "geo": {
      "title": "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
      "locations": [
        {"city": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "type": "–ì–ª–∞–≤–Ω—ã–π –æ—Ñ–∏—Å"},
        {"city": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "type": "–§–∏–ª–∏–∞–ª"},
        {"city": "–°–∞—Ä–∞–Ω—Å–∫", "type": "–§–∏–ª–∏–∞–ª"},
        {"city": "–°–∞—Ä–∞—Ç–æ–≤", "type": "–§–∏–ª–∏–∞–ª"}
      ]
    },
    "facts": {
      "title": "–¶–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã",
      "facts": [
        {"value": "1.5-3 –≥–æ–¥–∞", "label": "–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–æ–≤"},
        {"value": "50+", "label": "–£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"},
        {"value": "100%", "label": "–†–∞–±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ —Å –∫—Ä—É–ø–Ω—ã–º –±–∏–∑–Ω–µ—Å–æ–º"}
      ]
    },
    "benefits": {
      "title": "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã",
      "benefits": [
        {"title": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "description": "–†–∞–±–æ—Ç–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å—Ç–µ–∫–æ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"},
        {"title": "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã", "description": "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–µ–≥–∞—Å–∏-–ø—Ä–æ–µ–∫—Ç–æ–≤"},
        {"title": "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", "description": "–°—Ç–∞–±–∏–ª—å–Ω—ã–µ –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã"}
      ]
    },
    "culture": {
      "title": "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞",
      "culture": "–ú—ã —Ü–µ–Ω–∏–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –≥–ª—É–±–æ–∫–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç—ã. –ö–æ–º–∞–Ω–¥–∞ –≤–µ–¥–µ—Ç –ø—Ä–æ–µ–∫—Ç —Å –Ω—É–ª—è –¥–æ —Ä–µ–ª–∏–∑–∞ –±–µ–∑ —Å–º–µ–Ω—ã —Å–æ—Å—Ç–∞–≤–∞, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å –≤—ã—Å–æ—á–∞–π—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞."
    },
    "media": {
      "title": "–°—Ç–∞—Ç—å–∏ –∏ –º–µ–¥–∏–∞",
      "articles": [
        {"title": "–ö–∞–∫ –º—ã —Å–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–∞–ø–ø—ã –¥–ª—è –¢-–±–∞–Ω–∫–∞", "url": "#"},
        {"title": "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã Heads&Hands –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "url": "#"},
        {"title": "–ò–Ω—Ç–µ—Ä–≤—å—é —Å –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–º–ø–∞–Ω–∏–∏", "url": "#"}
      ]
    },
    "hiring": {
      "title": "–ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É",
      "process": "–ú—ã –∏—â–µ–º —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, –≥–æ—Ç–æ–≤—ã—Ö —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫—Ä—É–ø–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏. –ù–∞—à –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–±–æ—Ä–∞ –≤–∫–ª—é—á–∞–µ—Ç —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –ª–∏–¥–µ—Ä–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤ –†–æ—Å—Å–∏–∏!"
    },
    "cta": {
      "title": "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º",
      "description": "–•–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –∫–æ–º–∞–Ω–¥—ã, —Å–æ–∑–¥–∞—é—â–µ–π –±—É–¥—É—â–µ–µ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π? –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ –∏ –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É!",
      "buttonText": "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏",
      "buttonUrl": "https://hh.ru/employer/1439083"
    }
  }
}

–í–ê–ñ–ù–û: 
- –í–°–ï –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –æ–±—ä–µ–∫—Ç–µ "copy", –∞ –Ω–µ –≤ "props"
- –í hero –±–ª–æ–∫–µ –ª–æ–≥–æ—Ç–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ props.logoUrl
- –í—Å–µ –º–∞—Å—Å–∏–≤—ã –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3-5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
- –í—Å–µ —Ç–µ–∫—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏
- –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏`

    const userPrompt = `–ö–æ–º–ø–∞–Ω–∏—è: ${companyData.name || 'Heads&Hands'}
–û–ø–∏—Å–∞–Ω–∏–µ: ${companyData.companyCorpus || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–ø–∞–Ω–∏–∏'}
–õ–æ–≥–æ—Ç–∏–ø: ${companyData.logoUrl || '–ù–µ—Ç –ª–æ–≥–æ—Ç–∏–ø–∞'}

–°–æ–∑–¥–∞–π JSON —Å 10 –±–ª–æ–∫–∞–º–∏ –¥–ª—è –±—Ä–µ–Ω–¥-—Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ò—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏.

–í–ê–ñ–ù–û: –í hero –±–ª–æ–∫–µ –ª–æ–≥–æ—Ç–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ props.logoUrl, –∞ –Ω–µ –≤ props.logo!`

    console.log('=== SENDING TO LLM ===')
    console.log('System prompt length:', systemPrompt.length)
    console.log('User prompt length:', userPrompt.length)

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userPrompt }
      ],
      temperature: 0.7,
      max_tokens: 8000
    })

    const rawOutput = completion.choices[0]?.message?.content || '{}'
    console.log('=== RAW LLM OUTPUT ===')
    console.log('Raw output length:', rawOutput.length)
    console.log('Raw output:', rawOutput)
    console.log('=== END RAW OUTPUT ===')

    // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
    const jsonMatch = rawOutput.match(/\{[\s\S]*\}/)
    if (!jsonMatch) {
      throw new Error('LLM –Ω–µ –≤–µ—Ä–Ω—É–ª –≤–∞–ª–∏–¥–Ω—ã–π JSON')
    }

    const result = JSON.parse(jsonMatch[0])
    console.log('=== PARSED RESULT ===')
    console.log(JSON.stringify(result, null, 2))
    console.log('=== END PARSED RESULT ===')

    // –í—ã–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const blockCount = result.layout?.blocks?.length || 0
    console.log('=== BLOCK COUNT CHECK ===')
    console.log('Blocks count:', blockCount)

    return result as UnifiedGenerationResult

  } catch (error) {
    console.error('=== LLM GENERATION ERROR ===')
    console.error('Error:', error)
    console.error('=== END ERROR ===')
    
    throw error
  }
}