import React from 'react'
import { PageLayout } from '@/lib/layout'
import { BlockCopy } from '@/lib/copy'
import { ColorPalette, generatePaletteCSS } from '@/lib/palette'
import { HeroBlock } from './blocks/HeroBlock'
import { AboutBlock } from './blocks/AboutBlock'
import { TracksBlock } from './blocks/TracksBlock'
import { GeoBlock } from './blocks/GeoBlock'
import { FactsBlock } from './blocks/FactsBlock'
import { BenefitsBlock } from './blocks/BenefitsBlock'
import { CultureBlock } from './blocks/CultureBlock'
import { MediaBlock } from './blocks/MediaBlock'
import { HiringBlock } from './blocks/HiringBlock'
import { CTABlock } from './blocks/CTABlock'

// TODO: –£—Ç–æ—á–Ω–∏—Ç—å —Ç–∏–ø—ã –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω–æ–≤
interface PageRendererProps {
  layout: PageLayout
  copy: BlockCopy
  palette?: ColorPalette
  logoUrl?: string
}

export function PageRenderer({ layout, copy, palette, logoUrl }: PageRendererProps) {
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–ª–∏—Ç—Ä—É —á–µ—Ä–µ–∑ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  const paletteStyles = generatePaletteCSS(palette) as React.CSSProperties

  const renderBlock = (block: any, index: number) => {
    try {
      const blockCopy = copy[block.type] || {}
      const key = `${block.type}-${index}`

    switch (block.type) {
      case 'hero':
        return (
          <div key={key} className="mb-8">
            <HeroBlock
              title={blockCopy.title || block.props?.title || ''}
              subtitle={blockCopy.subtitle || block.props?.subtitle || ''}
              cta={blockCopy.buttonText || block.props?.buttonText || ''}
              directions={blockCopy.directions || block.props?.directions || []}
              logoUrl={logoUrl || block.props?.logoUrl}
              variant={block.variant}
              slogan={blockCopy.slogan || block.props?.slogan}
              teamImage={blockCopy.teamImage || block.props?.teamImage}
            />
          </div>
        )

      case 'about':
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º achievements –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫ –≤ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
        const achievements = blockCopy.achievements || block.props?.achievements || []
        const formattedAchievements = Array.isArray(achievements) && achievements.length > 0 && typeof achievements[0] === 'string'
          ? achievements.map((achievement, index) => {
              // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏
              const match = achievement.match(/^(\d+[+\-]?)/)
              const number = match ? match[1] : `${index + 1}`
              
              // –ü–æ–¥–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
              let image = ''
              if (achievement.includes('—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç') || achievement.includes('–∫–æ–º–∞–Ω–¥–∞')) {
                image = 'https://images.unsplash.com/photo-1522071820081-009f0129c71c?w=400&h=200&fit=crop&crop=center'
              } else if (achievement.includes('–ª–µ—Ç') || achievement.includes('–æ–ø—ã—Ç')) {
                image = 'https://images.unsplash.com/photo-1516321318423-f06f85e504b3?w=400&h=200&fit=crop&crop=center'
              } else if (achievement.includes('–º–µ—Å—Ç–æ') || achievement.includes('—Ä–µ–π—Ç–∏–Ω–≥')) {
                image = 'https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=400&h=200&fit=crop&crop=center'
              } else {
                // –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image = 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=200&fit=crop&crop=center'
              }
              
              // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ª–µ–π–±–ª –∏–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
              let shortLabel = achievement
              if (achievement.includes('—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç')) {
                shortLabel = '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤'
              } else if (achievement.includes('–ª–µ—Ç')) {
                shortLabel = '–õ–µ—Ç –æ–ø—ã—Ç–∞'
              } else if (achievement.includes('–º–µ—Å—Ç–æ')) {
                shortLabel = '–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ'
              }
              
              return {
                number,
                label: shortLabel,
                description: achievement,
                image
              }
            })
          : achievements

        return (
          <div key={key} className="mb-8">
            <AboutBlock
              title={blockCopy.title || block.props?.title || ''}
              content={blockCopy.description || blockCopy.content || block.props?.content || block.props?.description || ''}
              bullets={blockCopy.bullets || block.props?.bullets}
              variant={block.variant}
              slogan={blockCopy.slogan || block.props?.slogan}
              achievements={formattedAchievements}
              companyImage={blockCopy.companyImage || block.props?.companyImage}
              socialLinks={blockCopy.socialLinks || block.props?.socialLinks}
            />
          </div>
        )

      case 'tracks':
        return (
          <div key={key} className="mb-8">
            <TracksBlock
              title={blockCopy.title || block.props?.title || ''}
              subtitle={blockCopy.subtitle || block.props?.subtitle}
              items={blockCopy.tracks || blockCopy.items || block.props?.items || block.props?.tracks || []}
              variant={block.variant}
              stats={blockCopy.stats || block.props?.stats}
            />
          </div>
        )

      case 'geo':
        return (
          <div key={key} className="mb-8">
            <GeoBlock
              title={blockCopy.title || block.props?.title || ''}
              subtitle={blockCopy.subtitle || block.props?.subtitle}
              locations={(blockCopy.locations || block.props?.locations || []).map((loc: any) => ({
                city: loc.city || loc.name || '',
                country: loc.country || '–†–æ—Å—Å–∏—è',
                description: loc.type || loc.description || ''
              }))}
              variant={block.variant}
              mapImage={blockCopy.mapImage || block.props?.mapImage}
            />
          </div>
        )

      case 'facts':
        return (
          <div key={key} className="mb-8">
            <FactsBlock
              title={blockCopy.title || block.props?.title || ''}
              subtitle={blockCopy.subtitle || block.props?.subtitle}
              items={(blockCopy.facts || blockCopy.items || block.props?.items || block.props?.facts || []).map((fact: any) => ({
                number: fact.value || fact.number || '',
                label: fact.label || '',
                description: fact.description || ''
              }))}
              variant={block.variant}
            />
          </div>
        )

      case 'benefits':
        return (
          <div key={key} className="mb-8">
            <BenefitsBlock
              title={blockCopy.title || block.props?.title || ''}
              subtitle={blockCopy.subtitle || block.props?.subtitle}
              items={blockCopy.benefits ? [
                {
                  title: '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞',
                  description: '–í—ã—à–µ —Ä—ã–Ω–∫–∞ –Ω–∞ 20-30%',
                  category: 'financial',
                  icon: 'üí∞'
                },
                {
                  title: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞',
                  description: '–ü–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏',
                  category: 'social',
                  icon: 'üè•'
                },
                {
                  title: '–ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç',
                  description: '–ß–µ—Ç–∫–∏–µ –ø—É—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è',
                  category: 'career',
                  icon: 'üìà'
                },
                {
                  title: '–û–±—É—á–µ–Ω–∏–µ',
                  description: '–ö—É—Ä—Å—ã, –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
                  category: 'career',
                  icon: 'üéì'
                },
                {
                  title: '–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫',
                  description: '–†–∞–±–æ—Ç–∞–π—Ç–µ –∫–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ',
                  category: 'social',
                  icon: '‚è∞'
                },
                {
                  title: '–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
                  description: '–ò–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏ –º–∏—Ä–∞',
                  category: 'social',
                  icon: 'üåç'
                },
                {
                  title: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
                  description: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
                  category: 'social',
                  icon: '‚öΩ'
                },
                {
                  title: '–ú–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ',
                  description: '–ü–æ–º–æ—â—å –æ–ø—ã—Ç–Ω—ã—Ö –∫–æ–ª–ª–µ–≥',
                  category: 'career',
                  icon: 'üë®‚Äçüè´'
                }
              ] : (blockCopy.benefits || blockCopy.items || block.props?.items || block.props?.benefits || []).map((benefit: any) => ({
                title: benefit.title || '',
                description: benefit.description || '',
                category: benefit.category || 'career' as const
              }))}
              variant={block.variant}
            />
          </div>
        )

      case 'culture':
        return (
          <div key={key} className="mb-8">
            <CultureBlock
              title={blockCopy.title || block.props?.title || ''}
              subtitle={blockCopy.subtitle || block.props?.subtitle}
              items={blockCopy.culture ? [{
                title: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞',
                description: blockCopy.culture,
                icon: 'üè¢'
              }] : (blockCopy.items || block.props?.items || [])}
              variant={block.variant}
            />
          </div>
        )

      case 'media':
        return (
          <div key={key} className="mb-8">
            <MediaBlock
              title={blockCopy.title || block.props?.title || ''}
              subtitle={blockCopy.subtitle || block.props?.subtitle}
              items={(blockCopy.articles || blockCopy.items || block.props?.items || block.props?.articles || []).map((article: any) => ({
                title: article.title || '',
                description: article.description || '',
                url: article.url || '#',
                type: article.type || 'article' as const
              }))}
              variant={block.variant}
            />
          </div>
        )

      case 'hiring':
        return (
          <div key={key} className="mb-8">
            <HiringBlock
              title={blockCopy.title || block.props?.title || '–ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É'}
              subtitle={blockCopy.subtitle || block.props?.subtitle || '–ü—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–π–º–∞'}
              items={blockCopy.items || block.props?.items || [
                {
                  title: '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∑—é–º–µ',
                  description: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∑—é–º–µ –Ω–∞ –ø–æ—á—Ç—É',
                  duration: '1-2 –¥–Ω—è'
                },
                {
                  title: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ',
                  description: '–û–±—Å—É–¥–∏–º –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏ –∏ –æ–ø—ã—Ç',
                  duration: '1 –Ω–µ–¥–µ–ª—è'
                },
                {
                  title: '–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ',
                  description: '–ù–µ–±–æ–ª—å—à–æ–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ',
                  duration: '3-5 –¥–Ω–µ–π'
                },
                {
                  title: '–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ',
                  description: '–í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π',
                  duration: '2-3 –Ω–µ–¥–µ–ª–∏'
                }
              ]}
              variant={block.variant}
            />
          </div>
        )

      case 'cta':
        return (
          <div key={key} className="mb-8">
            <CTABlock
              title={blockCopy.title || block.props?.title || ''}
              description={blockCopy.description || blockCopy.subtitle || block.props?.subtitle || ''}
              buttonText={blockCopy.buttonText || block.props?.buttonText || ''}
              buttonUrl={blockCopy.buttonUrl || block.props?.buttonUrl || '#'}
              variant={block.variant}
            />
          </div>
        )

      default:
        console.warn(`Unknown block type: ${block.type}`)
        return null
    }
    } catch (error) {
      console.error(`Error rendering block ${block.type}:`, error)
      return (
        <div className="p-4 bg-red-100 border border-red-400 text-red-700 rounded">
          <h3 className="font-bold">–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –±–ª–æ–∫–∞</h3>
          <p>–¢–∏–ø –±–ª–æ–∫–∞: {block.type}</p>
          <p>–û—à–∏–±–∫–∞: {error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}</p>
        </div>
      )
    }
  }

  try {
    return (
      <div style={paletteStyles} className="min-h-screen" style={{...paletteStyles, backgroundColor: 'var(--background)'}}>
        <div className="max-w-7xl mx-auto py-8">
          {layout.blocks.map((block, index) => renderBlock(block, index))}
        </div>
      </div>
    )
  } catch (error) {
    console.error('Error rendering page:', error)
    return (
      <div className="min-h-screen bg-red-50 flex items-center justify-center">
        <div className="bg-white p-8 rounded-lg shadow-lg max-w-md">
          <h2 className="text-xl font-bold text-red-600 mb-4">–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</h2>
          <p className="text-gray-700 mb-4">
            –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.
          </p>
          <details className="text-sm text-gray-600">
            <summary className="cursor-pointer">–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏</summary>
            <pre className="mt-2 p-2 bg-gray-100 rounded overflow-auto">
              {error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}
            </pre>
          </details>
        </div>
      </div>
    )
  }
}

export default PageRenderer
